#!/usr/bin/env python
#
# Copyright (C) 2012 by Alex Brandt <alunduil@alunduil.com>
#
# singularity is freely distributable under the terms of an MIT-style license.
# See COPYING or http://www.opensource.org/licenses/mit-license.php.
#
# vim: filetype=python tabstop=4 shiftwidth=4

import re
import os

from datetime import datetime
from argparse import RawTextHelpFormatter

import singularity.information as info

from singularity.parameters import COMMON_PARAMETERS
from singularity.parameters import APPLY_PARAMETERS
from singularity.parameters import DAEMON_PARAMETERS

from singularity.parameters.arguments import SingularityArguments

def header(subcommand = "main"):
    output = []
    header = '.TH "{name}'.format(name = info.NAME.upper())
    if subcommand != "main":
        header += ' \- {sub}'.format(sub = subcommand.upper())
    header += '" "8" "{date:%B %d, %Y}" "Openstack Guest Agent" "Singularity {info.VERSION}"' # pylint: disable=C0301
    output.append(header.format(info = info, date = datetime.now()))
    output.append('.SH "NAME"')
    name = '{info.NAME}'
    if subcommand != "main":
        name += ' ' + subcommand
    name += ' \- {info.DESCRIPTION}'
    output.append(name.format(info = info))
    return output

def synopsis(subcommand = "main"):
    output = []
    output.append('.SH "SYNOPSIS"')
    output.extend(usage(subcommand))
    return output

def usage(subcommand = "main"):
    output = []

    output.append('.TP')

    usage_str = SingularityArguments(prog = info.NAME, parse = False).parsers[subcommand].format_usage().strip()
    usage_str = usage_str.replace("usage: ", "").replace("-", "\\-").replace("[", "[\\fI").replace("]", "\\fR]")
    usage_str = re.sub(r"\s+", " ", usage_str)

    output.append(usage_str)

    if subcommand == "main":
        output.extend(usage("apply"))
        output.extend(usage("daemon"))

    return output

def description(subcommand = "main"):
    output = []
    output.append('.SH "DESCRIPTION"')
    output.append(info.LONG_DESCRIPTION.replace(info.NAME, "\\fB" + info.NAME + "\\fR"))
    return output

def options(subcommand = "main"):
    output = []
    output.append('.SH "OPTIONS"')
    output.extend(help_(subcommand))
    return output

def help_(subcommand = "main"):
    output = []

    output.append('.SS "{0}"'.format(subcommand.capitalize()))

    help_str = SingularityArguments(prog = info.NAME, parse = False, formatter_class = RawTextHelpFormatter).parsers[subcommand].format_help().strip()

    help_lines = [ line.replace("-", "\\-").strip() for line in help_str.split('\n') ]
    help_lines = [ line for line in help_lines if not line.startswith("usage") ]
    help_lines = [ line for line in help_lines if not line.startswith("optional") ]
    help_lines = [ line for line in help_lines if not line.startswith("positional") ]
    help_lines = [ line for line in help_lines if not line.startswith("Available") ]
    help_lines = [ line for line in help_lines if not line.startswith("ACTION") ]
    help_lines = [ line for line in help_lines if not line.startswith("{") ]
    help_lines = [ line for line in help_lines if not line.startswith("[") ]
    help_lines = [ line for line in help_lines if len(line) ]

    description = "placeholder"

    for line in help_lines:
        if description:
            arguments, sep, description = line.partition('  ')
        else:
            description = line

        if not description:
            continue

        output.append('.TP')
        output.append(arguments.strip())
        output.append(re.sub(r"\s+", " ", description.strip()))

    if subcommand == "main":
        output.extend(help_("apply"))
        output.extend(help_("daemon"))

    return output

def environment():
    output = []
    output.append('.SH "ENVIRONMENT"')
    output.append('.TP')
    output.append('\\fBLOGLEVEL\\fR')
    output.append(
            'The logging level for the pre\\-setup run\\-time.  This ' \
            'controls the logging output of the console logger until the ' \
            'specified logger can be completely setup.'
            )

    return output

def files():
    output = []
    output.append('.SH "FILES"')

    output.append('.TP')
    output.append(os.path.join([ param for param in COMMON_PARAMETERS if "--configuration" in param["options"] ][0]["default"], "singularity.conf"))
    output.append(
            'The default configuration file for singularity.  This houses ' \
            'parameters that controls singularity\'s behavior.'
            )

    output.append('.TP')
    output.append([ param for param in COMMON_PARAMETERS if "--cache" in param["options"] ][0]["default"])
    output.append(
            'The default directory where cached results for singularity are ' \
            'stored.  Any configurators that create files as their output ' \
            'will have the results stored here before being applied to the ' \
            'filesystem.'
            )

    output.append('.TP')
    output.append([ param for param in DAEMON_PARAMETERS if "--pidfile" in param["options"] ][0]["default"])
    output.append(
            'The default pidfile location for singularity.  While the daemon ' \
            'is running the PID of the running daemon is stored in this file.'
            )

    output.append('.TP')
    output.append('Configurators Directory (default: /etc/singularity/configurators)')
    output.append(
            'The directory to search for more configurators (for development ' \
            'or other purposes).'
            )

    return output

def author():
    output = []
    output.append('.SH "AUTHOR"')
    output.append('{info.AUTHOR} <{info.AUTHOR_EMAIL}>'.format(info = info))
    return output

def see_also(subcommand = "main"):
    output = []
    output.append('.SH "SEE ALSO"')

    others = {
            "main": "singularity(8)",
            "apply": "singularity-apply(8)",
            "daemon": "singularity-daemon(8)",
            }
    all_ = others.values()
    all_.append('singularity.conf(5)')

    all_.remove(others[subcommand])

    output.append(", ".join(all_))

    return output

def security_considerations():
    output = []
    output.append('.SH "SECURITY CONSIDERATIONS"')
    output.append(
            'When logging with \\fIdebug\\fR level, the passwords that are ' \
            'decrypted as part of the password reset functionality are ' \
            'logged in plain text.'
            )
    return output

def man_page(subcommand = "main"):
    output = []

    output.extend(header(subcommand))
    output.extend(synopsis(subcommand))
    output.extend(description(subcommand))
    output.extend(options(subcommand))
    output.extend(environment())
    output.extend(files())
    output.extend(author())
    output.extend(see_also(subcommand))
    output.extend(security_considerations())

    return output

def main():
    
    print "\n".join(man_page("apply"))

if __name__ == "__main__":
    main()

